using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DAL.Models;

namespace DAL
{
    /// <summary>
    /// 巡检通知单操作类
    /// </summary>
    public class IPQCOrderOP : BaseOP
    {
        public IPQCOrderOP(string CompanyCode)
        {
            CompanyCode = CompanyCode;
        }

        public IPQCOrderOP(IMES3Entities db)
        {
            DB = db;
        }

        #region 查询数据
        /// <summary>
        /// 根据工单号查找
        /// </summary>
        /// <param name="orderCode"></param>
        /// <returns></returns>
        public IPQCOrderModel GetIPQCOrderByCode(string orderCode)
        {
            var data = DB.EMS_IPQCOrder.FirstOrDefault(p => p.OrderCode == orderCode);
            IPQCOrderModel rtn = new IPQCOrderModel();
            rtn.CopyFrom(data);
            return rtn;
        }
        /// <summary>
        /// 获得所有的显示控件
        /// </summary>
        /// <param name="pageName">页面</param>
        /// <param name="role">角色</param>
        /// <param name="status">工单状态</param>
        /// <returns></returns>
        public List<EMS_ControlTabs> GetControlTabs(string pageName, string role, int status)
        {
            return DB.EMS_ControlTabs.Where(p => p.PageName == pageName && p.Role == role && p.Status == status).ToList();
        }
        /// <summary>
        /// IPQC工单状态
        /// </summary>
        /// <param name="status"></param>
        /// <returns></returns>
        public string GetIPQCOrderStatus(int status)
        {
            string rtn = "";
            switch (status)
            {
                case (int)ConstInfo.EMSIPQCOrderStatus.Create:
                    rtn = "创建";
                    break;
                case (int)ConstInfo.EMSIPQCOrderStatus.PDAudit:
                    rtn = "PD维修中";
                    break;
                case (int)ConstInfo.EMSIPQCOrderStatus.Cancel:
                case (int)ConstInfo.EMSIPQCOrderStatus.Close:
                case (int)ConstInfo.EMSIPQCOrderStatus.PDClose:
                    rtn = "关闭";
                    break;
                default:
                    rtn = status.ToString();
                    break;
            }
            return rtn;
        }
        /// <summary>
        /// 根据设备获得工程师
        /// </summary>
        /// <param name="superiorEauip"></param>
        /// <param name="equip"></param>
        /// <returns></returns>
        private string GetEngineerByEquip(string superiorEauip, string equip)
        {
            try
            {
                return string.IsNullOrEmpty(equip) ? GetData<EMS_Equipment>(p => p.EquipCode == superiorEauip).Engineer : GetData<EMS_Equipment>(p => p.EquipCode == equip).Engineer;
            }
            catch (Exception ex)
            {
                return "";
            }
        }
        /// <summary>
        /// 获得维修班组长
        /// </summary>
        /// <param name="userAccount">维修工工号</param>
        /// <returns></returns>
        public string GetMaintainLead(string userAccount)
        {
            try
            {
                var data = (from a in DB.EMS_MaintainGroup
                            join b in DB.EMS_MaintainShift on a.ShiftID equals b.ShiftID
                            where a.UserAccount == userAccount
                            select b).FirstOrDefault();
                return data == null ? "" : data.TeamLead;
            }
            catch
            {
                return "";
            }
        }
        /// <summary>
        /// 工单审核获取下一状态
        /// </summary>
        /// <param name="orderType">工单类型</param>
        /// <param name="action">动作</param>
        /// <param name="status">当前状态</param>
        /// <returns></returns>
        public EMS_WorkFlow GetNextStatus(string orderType, string action, int status)
        {
            return DB.EMS_WorkFlow.FirstOrDefault(p => p.OrderType == orderType && p.Action == action && p.Status == status);
        }
        /// <summary>
        /// 获得设备信息      
        /// </summary>
        /// <param name="superiorEquip">设备</param>
        /// <param name="equipCode">子设备</param>
        /// <returns></returns>        
        public EMS_Equipment GetEquipByEquipCode(string superiorEquip, string equipCode)
        {
            return string.IsNullOrEmpty(equipCode) ? GetData<EMS_Equipment>(p => p.EquipCode == superiorEquip) : GetData<EMS_Equipment>(p => p.EquipCode == equipCode);
        }

        #region 前台刷新数据
        /// <summary>
        /// 获取工程师IPQC工单
        /// </summary>
        /// <param name="engineerAccount">工程师工号</param>
        /// <param name="txtSearch">搜索</param>
        /// <param name="pageNumber">页号</param>
        /// <param name="pageSize">每页行数</param>
        /// <param name="total">总数</param>
        /// <returns></returns>
        public List<IPQCOrderModel> GetIPQCOrderForEngineer(string engineerAccount, string txtSearch, int pageNumber, int pageSize, out int total)
        {
            var temp = (from a in DB.EMS_IPQCOrder
                        join b1 in DB.EMS_FunctionLocation on a.SuperiorFunLocCode equals b1.FunctionLocationCode into b2
                        join c1 in DB.EMS_FunctionLocation on a.FunctionLocationCode equals c1.FunctionLocationCode into c2
                        join d1 in DB.EMS_Equipment on a.SuperiorEquipCode equals d1.EquipCode into d2
                        join e1 in DB.EMS_Equipment on a.EquipCode equals e1.EquipCode into e2
                        join f1 in DB.SYS_User on a.CreateUserAccount equals f1.UserAccount into f2
                        from b3 in b2.DefaultIfEmpty()
                        from c3 in b2.DefaultIfEmpty()
                        from d3 in d2.DefaultIfEmpty()
                        from e3 in e2.DefaultIfEmpty()
                        from f3 in f2.DefaultIfEmpty()
                        where a.IsClosed == false
                        && (d3.Engineer == engineerAccount || e3.Engineer == engineerAccount || a.CreateUserAccount == engineerAccount)
                        && (string.IsNullOrEmpty(txtSearch) || a.OrderCode.Contains(txtSearch) || a.SuperiorEquipCode.Contains(txtSearch))
                        select new IPQCOrderModel()
                        {
                            ID = a.ID,
                            SuperiorFunLocCodeName = b3.FunctionLocationName ?? "",
                            FunctionLocationCodeName = c3.FunctionLocationName ?? "",
                            SuperiorEquipCodeName = d3.EquipName ?? "",
                            EquipCodeName = e3.EquipName ?? "",
                            CreateUserName = f3.UserName ?? "",
                            IPQCOrder = a
                        }).OrderByDescending(p => p.ID);
            total = temp.Count();
            var data = temp.Skip((pageNumber - 1) * pageSize).Take(pageSize);
            return data.ToList();
        }
        /// <summary>
        /// 获取工程师IPQC工单
        /// </summary>
        /// <param name="createAccount">工程师工号</param>
        /// <param name="txtSearch">搜索</param>
        /// <param name="pageNumber">页号</param>
        /// <param name="pageSize">每页行数</param>
        /// <param name="total">总数</param>
        /// <returns></returns>
        public List<IPQCOrderModel> GetIPQCOrderForCreate(string createAccount, string txtSearch, int pageNumber, int pageSize, out int total)
        {
            var temp = (from a in DB.EMS_IPQCOrder
                        join b1 in DB.EMS_FunctionLocation on a.SuperiorFunLocCode equals b1.FunctionLocationCode into b2
                        join c1 in DB.EMS_FunctionLocation on a.FunctionLocationCode equals c1.FunctionLocationCode into c2
                        join d1 in DB.EMS_Equipment on a.SuperiorEquipCode equals d1.EquipCode into d2
                        join e1 in DB.EMS_Equipment on a.EquipCode equals e1.EquipCode into e2
                        join f1 in DB.SYS_User on a.CreateUserAccount equals f1.UserAccount into f2
                        from b3 in b2.DefaultIfEmpty()
                        from c3 in b2.DefaultIfEmpty()
                        from d3 in d2.DefaultIfEmpty()
                        from e3 in e2.DefaultIfEmpty()
                        from f3 in f2.DefaultIfEmpty()
                        where a.IsClosed == false
                        && a.CreateUserAccount == createAccount
                        && (string.IsNullOrEmpty(txtSearch) || a.OrderCode.Contains(txtSearch) || a.SuperiorEquipCode.Contains(txtSearch))
                        select new IPQCOrderModel()
                        {
                            ID = a.ID,
                            SuperiorFunLocCodeName = b3.FunctionLocationName ?? "",
                            FunctionLocationCodeName = c3.FunctionLocationName ?? "",
                            SuperiorEquipCodeName = d3.EquipName ?? "",
                            EquipCodeName = e3.EquipName ?? "",
                            CreateUserName = f3.UserName ?? "",
                            IPQCOrder = a
                        }).OrderByDescending(p => p.ID);
            total = temp.Count();
            var data = temp.Skip((pageNumber - 1) * pageSize).Take(pageSize);
            return data.ToList();
        }
        #endregion
        #endregion

        #region 添加数据
        public bool CreateEMS_IPQCOrder(EMS_IPQCOrder ipqcEntity, string companyCode)
        {
            try
            {
                Insert(ipqcEntity);
                //记录IPQC工单Log
                CreateEMS_IPQCOrderLog(ipqcEntity);
                if (ipqcEntity.Emergency == "A")
                {
                    //创建通知单
                    AddOrUpdateNoticeOderByIPQC(ipqcEntity, companyCode, (int)ConstInfo.EMSNoticeOrderStatus.Create, (int)ConstInfo.EMSNoticeOperateType.Create);
                }
                //创建同步工单信息
                //AddOrUpdateSynWorkOrderByIPQC(ipqcEntity, (int)ConstInfo.EMSNoticeOrderStatus.Create, (int)ConstInfo.EMSNoticeOperateType.Create);
                DB.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 记录IPQC工单Log
        /// </summary>
        /// <param name="pdEntity">EM实体</param>
        private void CreateEMS_IPQCOrderLog(EMS_IPQCOrder pdEntity)
        {
            try
            {
                EMS_IPQCOrderLog ipqcLog = new EMS_IPQCOrderLog();
                ipqcLog.CopyFrom(pdEntity);
                Insert(ipqcLog);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 根据IPQC工单添加或更改通知单
        /// </summary>
        /// <param name="ipqcEntity">EM实体</param>
        /// <param name="companyCode">工厂编码</param>
        /// <param name="status">通知单状态</param>
        /// <param name="operateType">通知单处理标识</param>
        private void AddOrUpdateNoticeOderByIPQC(EMS_IPQCOrder ipqcEntity, string companyCode, int status, int operateType)
        {
            try
            {
                bool isExist = true;//是否已存在该工单的通知单
                var noticeOrder = GetData<EMS_NoticeOrder>(p => p.OriginOrderCode == ipqcEntity.OrderCode);
                if (noticeOrder == null)
                {
                    isExist = false;
                    noticeOrder = _CreateNoticeOrder();
                    noticeOrder.OrderCode = new BarcodeOP(CompanyCode).GenerateNoticeOrderNo(companyCode, ipqcEntity.CreateUserAccount, ipqcEntity.CreateMachine);
                    noticeOrder.OrderType = ConstInfo.EMSNoticeOrderType.IPQC;
                    noticeOrder.CreateUserAccount = ipqcEntity.CreateUserAccount;
                    noticeOrder.CreateTime = ipqcEntity.CreateTime;
                    noticeOrder.CreateMachine = ipqcEntity.CreateMachine;
                    noticeOrder.TaskId = "";
                }
                //给通知单实体属性赋值
                noticeOrder.OrderTitle = ipqcEntity.OrderTitle;
                noticeOrder.SuperiorFunLocCode = "";
                noticeOrder.FunctionLocationCode = string.IsNullOrEmpty(ipqcEntity.FunctionLocationCode) ? ipqcEntity.SuperiorFunLocCode : ipqcEntity.FunctionLocationCode;
                noticeOrder.SuperiorEquipCode = "";
                noticeOrder.EquipCode = string.IsNullOrEmpty(ipqcEntity.EquipCode) ? ipqcEntity.SuperiorEquipCode : ipqcEntity.EquipCode;
                noticeOrder.Engineer = GetEngineerByEquip(ipqcEntity.SuperiorEquipCode, ipqcEntity.EquipCode);
                noticeOrder.PlanFactory = ipqcEntity.PlanFactory;
                noticeOrder.WorkCenter = ipqcEntity.WorkCenter;
                noticeOrder.WCFactory = ipqcEntity.WCFactory;
                noticeOrder.IsShutDown = false;
                noticeOrder.ShutDownStartDate = "";
                noticeOrder.ShutDownStartTime = "";
                noticeOrder.ShutDownEndDate = "";
                noticeOrder.ShutDownEndTime = "";
                noticeOrder.ShutDownTime = 0;
                noticeOrder.OriginOrderCode = ipqcEntity.OrderCode;
                noticeOrder.HitchDescDetail = ipqcEntity.HitchDesc;
                noticeOrder.HitchReason = "";
                noticeOrder.MaintainStep = ipqcEntity.Solution;
                noticeOrder.Advice = "";
                noticeOrder.Suggestion = ipqcEntity.Suggestion;
                noticeOrder.Status = status;
                noticeOrder.OperateType = operateType;
                noticeOrder.IsSyncSAP = false;
                noticeOrder.LatestModifyUserAccount = ipqcEntity.LatestModifyUserAccount;
                noticeOrder.LatestModifyTime = ipqcEntity.LatestModifyTime;
                noticeOrder.LatestModifyMachine = ipqcEntity.LatestModifyMachine;
                //通知单明细表
                var noticOrderDet = GetData<EMS_NoticeOrderDet>(p => p.OrderCode == noticeOrder.OrderCode) ?? new EMS_NoticeOrderDet()
                {
                    OrderCode = noticeOrder.OrderCode,
                    OrderType = noticeOrder.OrderType,
                    ProjectNo = "1",
                    CreateUserAccount = noticeOrder.CreateUserAccount,
                    CreateTime = noticeOrder.CreateTime,
                    CreateMachine = noticeOrder.CreateMachine
                };
                noticOrderDet.HitchPartGrpCode = "";
                noticOrderDet.HitchPartCode = "";
                noticOrderDet.HitchDescGrpCode = "";
                noticOrderDet.HitchDescCode = "";
                noticOrderDet.HitchDesc = "";
                noticOrderDet.HitchReasionGrpCode = "";
                noticOrderDet.HitchReasionCode = "";
                noticOrderDet.HitchReasion = "";
                noticOrderDet.LatestModifyUserAccount = noticeOrder.LatestModifyUserAccount;
                noticOrderDet.LatestModifyTime = noticeOrder.LatestModifyTime;
                noticOrderDet.LatestModifyMachine = noticeOrder.LatestModifyMachine;
                if (isExist)
                {
                    Update(noticeOrder);
                    Update(noticOrderDet);
                }
                else
                {
                    Insert(noticeOrder);
                    Insert(noticOrderDet);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 根据PD工单添加或更改通知单
        /// </summary>
        /// <param name="pdEntity">EM实体</param>
        /// <param name="companyCode">工厂编码</param>
        /// <param name="status">通知单状态</param>
        /// <param name="operateType">通知单处理标识</param>
        private void AddOrUpdateNoticeOderByPD(EMS_PDMWorkOrder pdEntity, string companyCode, int status, int operateType)
        {
            try
            {
                bool isExist = true;//是否已存在该工单的通知单
                var noticeOrder = GetData<EMS_NoticeOrder>(p => p.OriginOrderCode == pdEntity.OrderCode);
                if (noticeOrder == null)
                {
                    isExist = false;
                    noticeOrder = _CreateNoticeOrder();
                    noticeOrder.OrderCode = new BarcodeOP(CompanyCode).GenerateNoticeOrderNo(companyCode, pdEntity.CreateUserAccount, pdEntity.CreateMachine);
                    noticeOrder.OrderType = ConstInfo.EMSNoticeOrderType.PD;
                    noticeOrder.CreateUserAccount = pdEntity.CreateUserAccount;
                    noticeOrder.CreateTime = pdEntity.CreateTime;
                    noticeOrder.CreateMachine = pdEntity.CreateMachine;
                    noticeOrder.TaskId = "";
                }
                //给通知单实体属性赋值
                noticeOrder.OrderTitle = pdEntity.OrderTitle;
                noticeOrder.SuperiorFunLocCode = pdEntity.SuperiorFunLocCode;
                noticeOrder.FunctionLocationCode = pdEntity.FunctionLocationCode;
                noticeOrder.SuperiorEquipCode = pdEntity.SuperiorEquipCode;
                noticeOrder.EquipCode = pdEntity.EquipCode;
                noticeOrder.Engineer = GetEngineerByEquip(pdEntity.SuperiorEquipCode, pdEntity.EquipCode);
                noticeOrder.PlanFactory = pdEntity.PlanFactory;
                noticeOrder.WorkCenter = pdEntity.WorkCenter;
                noticeOrder.WCFactory = pdEntity.WCFactory;
                noticeOrder.IsShutDown = false;
                noticeOrder.ShutDownStartDate = "";
                noticeOrder.ShutDownStartTime = "";
                noticeOrder.ShutDownEndDate = "";
                noticeOrder.ShutDownEndTime = "";
                noticeOrder.ShutDownTime = 0;
                noticeOrder.OriginOrderCode = pdEntity.OrderCode;
                noticeOrder.HitchDescDetail = pdEntity.HitchDescDetail;
                noticeOrder.HitchReason = "";
                noticeOrder.MaintainStep = pdEntity.Solution;
                noticeOrder.Advice = "";
                noticeOrder.Suggestion = pdEntity.Suggestion;
                noticeOrder.Status = status;
                noticeOrder.OperateType = operateType;
                noticeOrder.IsSyncSAP = false;
                noticeOrder.LatestModifyUserAccount = pdEntity.LatestModifyUserAccount;
                noticeOrder.LatestModifyTime = pdEntity.LatestModifyTime;
                noticeOrder.LatestModifyMachine = pdEntity.LatestModifyMachine;
                //通知单明细表
                var noticOrderDet = GetData<EMS_NoticeOrderDet>(p => p.OrderCode == noticeOrder.OrderCode) ?? new EMS_NoticeOrderDet()
                {
                    OrderCode = noticeOrder.OrderCode,
                    OrderType = noticeOrder.OrderType,
                    ProjectNo = "1",
                    CreateUserAccount = noticeOrder.CreateUserAccount,
                    CreateTime = noticeOrder.CreateTime,
                    CreateMachine = noticeOrder.CreateMachine
                };
                noticOrderDet.HitchPartGrpCode = "";
                noticOrderDet.HitchPartCode = "";
                noticOrderDet.HitchDescGrpCode = "";
                noticOrderDet.HitchDescCode = "";
                noticOrderDet.HitchDesc = "";
                noticOrderDet.HitchReasionGrpCode = "";
                noticOrderDet.HitchReasionCode = "";
                noticOrderDet.HitchReasion = "";
                noticOrderDet.LatestModifyUserAccount = noticeOrder.LatestModifyUserAccount;
                noticOrderDet.LatestModifyTime = noticeOrder.LatestModifyTime;
                noticOrderDet.LatestModifyMachine = noticeOrder.LatestModifyMachine;
                if (isExist)
                {
                    Update(noticeOrder);
                    Update(noticOrderDet);
                }
                else
                {
                    Insert(noticeOrder);
                    Insert(noticOrderDet);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 根据PD工单同步工单表
        /// </summary>
        /// <param name="pdEntity">EM工单</param>
        /// <param name="status">工单状态</param>
        /// <param name="operateType">处理标识</param>
        private void AddOrUpdateSynWorkOrderByPD(EMS_PDMWorkOrder pdEntity, int status, int operateType)
        {
            try
            {
                bool isExist = true;//是否已存在EM工单同步信息
                var synWorkOrder = GetData<EMS_SynWorkOrder>(p => p.OrderCode == pdEntity.OrderCode);
                if (synWorkOrder == null)
                {
                    isExist = false;
                    synWorkOrder = _CreateSynWorkOrder();
                    synWorkOrder.OrderCode = pdEntity.OrderCode;
                    synWorkOrder.OrderType = ConstInfo.EMSSynOrderType.PD;
                    synWorkOrder.CreateUserAccount = pdEntity.CreateUserAccount;
                    synWorkOrder.CreateTime = pdEntity.CreateTime;
                    synWorkOrder.CreateMachine = pdEntity.CreateMachine;
                    synWorkOrder.TaskId = "";
                }
                synWorkOrder.OrderTitle = pdEntity.OrderTitle;
                synWorkOrder.SuperiorFunLocCode = "";
                synWorkOrder.FunctionLocationCode = string.IsNullOrEmpty(pdEntity.FunctionLocationCode) ? pdEntity.SuperiorFunLocCode : pdEntity.FunctionLocationCode;
                synWorkOrder.SuperiorEquipCode = "";
                synWorkOrder.EquipCode = string.IsNullOrEmpty(pdEntity.EquipCode) ? pdEntity.SuperiorEquipCode : pdEntity.EquipCode;
                synWorkOrder.Engineer = GetEngineerByEquip(pdEntity.SuperiorEquipCode, pdEntity.EquipCode);
                synWorkOrder.StartDate = pdEntity.CreateTime;
                synWorkOrder.EndDate = pdEntity.MaintainEndTime;
                synWorkOrder.PlanFactory = pdEntity.PlanFactory;
                synWorkOrder.WorkCenter = pdEntity.WorkCenter;
                synWorkOrder.WCFactory = pdEntity.WCFactory;
                synWorkOrder.OrderStatus = status;
                synWorkOrder.SAPCreateDate = pdEntity.CreateTime.ToString("yyyyMMdd");
                synWorkOrder.SAPCreateTime = pdEntity.CreateTime.ToString("HHmmss");
                synWorkOrder.Process = "0010";
                synWorkOrder.WorkTime = 0;
                synWorkOrder.Unit = "H";
                synWorkOrder.OperateType = operateType;
                synWorkOrder.IsSyncSAP = false;
                synWorkOrder.LatestModifyUserAccount = pdEntity.LatestModifyUserAccount;
                synWorkOrder.LatestModifyTime = pdEntity.LatestModifyTime;
                synWorkOrder.LatestModifyMachine = pdEntity.LatestModifyMachine;
                if (isExist)
                {
                    Update(synWorkOrder);
                }
                else
                {
                    Insert(synWorkOrder);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region 更新数据
        /// <summary>
        /// 更新EM工单数据
        /// </summary>
        /// <param name="ipqcEntity">EM工单</param>
        /// <param name="isChangeStatus">是否改变状态（只是保存信息）</param>
        /// <returns></returns>        
        public bool UpdateEMS_IPQCOrder(EMS_IPQCOrder ipqcEntity, bool isChangeStatus = false)
        {
            try
            {
                ipqcEntity.LatestModifyTime = DateTime.Now;
                //更改前，不同的状态有不同的额外操作
                if (isChangeStatus)
                {
                    IPQCActionBeforeUpdate(ipqcEntity);
                }
                Update(ipqcEntity);
                CreateEMS_IPQCOrderLog(ipqcEntity);
                DB.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// IPQC更改前操作
        /// </summary>
        /// <param name="ipqcEntity"></param>
        private void IPQCActionBeforeUpdate(EMS_IPQCOrder ipqcEntity)
        {
            try
            {
                switch (ipqcEntity.Status)
                {
                    case (int)ConstInfo.EMSIPQCOrderStatus.Create:
                        {
                            //重要性等级为A时，同步到SAP
                            if (ipqcEntity.Emergency == "A")
                            {
                                AddOrUpdateNoticeOderByIPQC(ipqcEntity, CompanyCode, (int)ConstInfo.EMSNoticeOrderStatus.Create, (int)ConstInfo.EMSNoticeOperateType.Create);
                            }
                            break;
                        }
                    case (int)ConstInfo.EMSIPQCOrderStatus.Cancel:
                        {
                            //重要性为A时，同步到SAP
                            if (ipqcEntity.Emergency == "A")
                            {
                                AddOrUpdateNoticeOderByIPQC(ipqcEntity, CompanyCode, (int)ConstInfo.EMSNoticeOrderStatus.Complete, (int)ConstInfo.EMSNoticeOperateType.Update);
                            }
                            break;
                        }
                    case (int)ConstInfo.EMSIPQCOrderStatus.Close:
                        {
                            //重要性为A时，同步到SAP
                            if (ipqcEntity.Emergency == "A")
                            {
                                AddOrUpdateNoticeOderByIPQC(ipqcEntity, CompanyCode, (int)ConstInfo.EMSNoticeOrderStatus.Complete, (int)ConstInfo.EMSNoticeOperateType.Update);
                            }
                            //AddOrUpdateSynWorkOrderByIPQC(pdEntity, (int)ConstInfo.EMSNoticeOrderStatus.Complete, (int)ConstInfo.EMSNoticeOperateType.Create);
                            break;
                        }
                    case (int)ConstInfo.EMSIPQCOrderStatus.PDAudit:
                        {
                            //创建PD工单
                            var pdEntity = CreatePDByIPQC(ipqcEntity);
                            //PD工单同步
                            AddOrUpdateNoticeOderByPD(pdEntity, CompanyCode, (int)ConstInfo.EMSNoticeOrderStatus.Create, (int)ConstInfo.EMSNoticeOperateType.Create);
                            AddOrUpdateSynWorkOrderByPD(pdEntity, (int)ConstInfo.EMSNoticeOrderStatus.Create, (int)ConstInfo.EMSNoticeOperateType.Create);
                            break;
                        }
                    case (int)ConstInfo.EMSIPQCOrderStatus.PDClose:
                        {
                            //重要性为A时，同步到SAP
                            if (ipqcEntity.Emergency == "A")
                            {
                                AddOrUpdateNoticeOderByIPQC(ipqcEntity, CompanyCode, (int)ConstInfo.EMSNoticeOrderStatus.Complete, (int)ConstInfo.EMSNoticeOperateType.Update);
                            }
                            break;
                        }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 根据IPQC工单号创建PD
        /// </summary>
        /// <param name="ipqcEntity"></param>
        /// <returns></returns>
        public EMS_PDMWorkOrder CreatePDByIPQC(EMS_IPQCOrder ipqcEntity)
        {
            var pdEntity = _CreatePDMWorkOrder();
            pdEntity.OrderCode = new BarcodeOP(CompanyCode).GenerateWorkOrderNo(CompanyCode, ipqcEntity.LatestModifyUserAccount, ipqcEntity.LatestModifyMachine);
            pdEntity.OrderType = ConstInfo.EMSOrderType.PD;
            pdEntity.OriginType = ConstInfo.EMSOrderType.IPQC;
            pdEntity.OriginCode = ipqcEntity.OrderCode;
            pdEntity.SuperiorFunLocCode = ipqcEntity.SuperiorFunLocCode;
            pdEntity.FunctionLocationCode = ipqcEntity.FunctionLocationCode;
            pdEntity.SuperiorEquipCode = ipqcEntity.SuperiorEquipCode;
            pdEntity.EquipCode = ipqcEntity.EquipCode;
            pdEntity.PlanFactory = ipqcEntity.PlanFactory;
            pdEntity.WorkCenter = ipqcEntity.WorkCenter;
            pdEntity.WCFactory = ipqcEntity.WCFactory;
            pdEntity.HitchDescDetail = ipqcEntity.HitchDesc;
            pdEntity.Status = (int)ConstInfo.EMSPDOrderStatus.Create;
            pdEntity.CreateUserAccount = ipqcEntity.LatestModifyUserAccount;
            pdEntity.CreateTime = DateTime.Now;
            pdEntity.CreateMachine = ipqcEntity.LatestModifyMachine;
            pdEntity.LatestModifyUserAccount = ipqcEntity.LatestModifyUserAccount;
            pdEntity.LatestModifyTime = DateTime.Now;
            pdEntity.LatestModifyMachine = ipqcEntity.LatestModifyMachine;
            return pdEntity;
        }

        /// <summary>
        /// 关联同步表与通知单
        /// </summary>
        /// <param name="orderCode">EM工单号</param>
        /// <returns></returns>        
        public bool LinkSynOrderNoticeOrder(string orderCode)
        {
            try
            {
                var noticeOrder = GetData<EMS_NoticeOrder>(p => p.OriginOrderCode == orderCode);
                if (noticeOrder == null)
                {
                    throw new Exception("未找到工单" + orderCode + "关联通知单");
                }
                var synOrder = GetData<EMS_SynWorkOrder>(p => p.OrderCode == orderCode);
                if (synOrder == null)
                {
                    throw new Exception("未找到工单" + orderCode + "关联同步表");
                }
                synOrder.NoticeOrderCode = noticeOrder.OrderCode;
                Update(synOrder);
                DB.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        /// <summary>
        /// 连接由IPQC工单转成的PD工单的同步表和通知单
        /// </summary>
        /// <param name="ipqcCode">IPQC工单号</param>
        /// <returns></returns>
        public bool LinkPDSynOrderNoticeOrderByIPQCCode(string ipqcCode)
        {
            try
            {
                var pdEntity = GetData<EMS_PDMWorkOrder>(p => p.OriginCode == ipqcCode);
                var noticeOrder = GetData<EMS_NoticeOrder>(p => p.OriginOrderCode == pdEntity.OrderCode);
                if (noticeOrder == null)
                {
                    throw new Exception("未找到工单" + pdEntity.OrderCode + "关联通知单");
                }
                var synOrder = GetData<EMS_SynWorkOrder>(p => p.OrderCode == pdEntity.OrderCode);
                if (synOrder == null)
                {
                    throw new Exception("未找到工单" + pdEntity.OrderCode + "关联同步表");
                }
                synOrder.NoticeOrderCode = noticeOrder.OrderCode;
                Update(synOrder);
                DB.SaveChanges();
                return true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

        #region 创建工单实体
        /*
         因为数据库中所有字段尽量为not null，故工单实体中字段需要手动赋值
         这部分代码全是返回工单实体
         */

        public EMS_IPQCOrder _CreateIPQCOrder()
        {
            return new EMS_IPQCOrder()
            {
                OrderCode = "",
                OrderTitle = "",
                SuperiorFunLocCode = "",
                FunctionLocationCode = "",
                SuperiorEquipCode = "",
                EquipCode = "",
                Emergency = "",
                IsHandle = false,
                PlanFactory = "",
                WorkCenter = "",
                WCFactory = "",
                HitchDesc = "",
                Solution = "",
                Suggestion = "",
                Status = 1000,
                CreateUserAccount = "",
                CreateTime = DateTime.Now,
                CreateMachine = "",
                LatestModifyUserAccount = "",
                LatestModifyTime = DateTime.Now,
                LatestModifyMachine = "",
                IsClosed = false,
                CloseUserAccount = "",
                CloseMachine = ""
            };
        }
        /// <summary>
        /// 创建PD工单实体
        /// </summary>
        /// <returns></returns>
        public EMS_PDMWorkOrder _CreatePDMWorkOrder()
        {
            return new EMS_PDMWorkOrder()
            {
                OrderCode = "",
                OrderType = "",
                OrderTitle = "",
                OriginType = "",
                OriginCode = "",
                SuperiorFunLocCode = "",
                FunctionLocationCode = "",
                SuperiorEquipCode = "",
                EquipCode = "",
                PlanStartTime = DateTime.Now,
                PlanEndTime = DateTime.Now,
                PlanFactory = "",
                WorkCenter = "",
                WCFactory = "",
                LargeGroup = "",
                ArrangeID = "",
                MaintainShiftID = "",
                Workers = 0,
                WorkTime = 0,
                MaintainTeamLead = "",
                MaintainStartTime = null,
                MaintainEndTime = null,
                IsHandle = false,
                NotHandleReason = "",
                HitchDescDetail = "",
                Solution = "",
                Suggestion = "",
                EngeerLeadSuggestion = "",
                Status = 0,
                CreateUserAccount = "",
                CreateTime = DateTime.Now,
                CreateMachine = "",
                LatestModifyUserAccount = "",
                LatestModifyTime = DateTime.Now,
                LatestModifyMachine = "",
                IsClosed = false,
                CloseUserAccount = "",
                CloseTime = null,
                CloseMachine = "",
                IsDel = 0
            };
        }
        /// <summary>
        /// 创建通知单信息
        /// </summary>
        /// <returns></returns>
        public EMS_NoticeOrder _CreateNoticeOrder()
        {
            return new EMS_NoticeOrder()
            {
                OrderCode = "",
                OrderType = "",
                OrderTitle = "",
                SuperiorFunLocCode = "",
                FunctionLocationCode = "",
                SuperiorEquipCode = "",
                EquipCode = "",
                Engineer = "",
                PlanFactory = "",
                WorkCenter = "",
                WCFactory = "",
                IsShutDown = false,
                ShutDownStartDate = "",
                ShutDownStartTime = "",
                ShutDownEndDate = "",
                ShutDownEndTime = "",
                ShutDownTime = 0,
                OriginOrderCode = "",
                HitchDescDetail = "",
                HitchReason = "",
                MaintainStep = "",
                Advice = "",
                Suggestion = "",
                EngeerLeadSuggestion = "",
                Status = 0,
                OperateType = 0,
                IsSyncSAP = false,
                CreateUserAccount = "",
                CreateTime = DateTime.Now,
                CreateMachine = "",
                LatestModifyUserAccount = "",
                LatestModifyTime = DateTime.Now,
                LatestModifyMachine = ""
            };
        }
        /// <summary>
        /// 创建同步工单
        /// </summary>
        /// <returns></returns>
        public EMS_SynWorkOrder _CreateSynWorkOrder()
        {
            return new EMS_SynWorkOrder()
            {
                OrderCode = "",
                OrderType = "",
                OrderTitle = "",
                SuperiorFunLocCode = "",
                FunctionLocationCode = "",
                SuperiorEquipCode = "",
                EquipCode = "",
                Engineer = "",
                StartDate = DateTime.Now,
                EndDate = null,
                PlanFactory = "",
                WorkCenter = "",
                WCFactory = "",
                OrderStatus = 0,
                NoticeOrderCode = "",
                SAPCreateDate = "",
                SAPCreateTime = "",
                OperateType = 0,
                IsSyncSAP = false,
                CreateUserAccount = "",
                CreateTime = DateTime.Now,
                CreateMachine = "",
                LatestModifyUserAccount = "",
                LatestModifyTime = DateTime.Now,
                LatestModifyMachine = ""
            };
        }
        /// <summary>
        /// 创建工单维修工
        /// </summary>
        /// <returns></returns>
        public EMS_WorkOrderMaintain _WorkOrderMaintain()
        {
            return new EMS_WorkOrderMaintain()
            {
                OrderCode = "",
                OrderType = "",
                Process = "",
                MaintainUser = "",
                IsPrimary = false,
                MaintainStartTime = DateTime.Now,
                MaintainEndTime = null,
                WorkTime = 0,
                Unit = "H",
                PlanFactory = "",
                WorkCenter = "",
                WCFactory = "",
                IsSyncSAP = true,
                CreateUserAccount = "",
                CreateTime = DateTime.Now,
                CreateMachine = "",
                LatestModifyUserAccount = "",
                LatestModifyTime = DateTime.Now,
                LatestModifyMachine = "",
                TaskId = ""
            };
        }

        #endregion
    }
}
